datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?   @unique
  slug          String?   @unique
  email         String?   @unique
  isAdmin       Boolean @default(false)
  emailVerified DateTime?
  body          String?
  image         String?
  isActive      Boolean @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  comments      Comment[]
  tags          Tag[]
  postVotes     PostVote[]
  commentVotes  CommentVote[]
}

model Post {
  id            Int       @id @default(autoincrement())
  identifier    String
  slug          String
  title         String
  body          String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  tag           Tag       @relation(fields: [tagId], references: [id])
  tagId         Int
  comments      Comment[]
  postVotes     PostVote[]
  @@unique([identifier, slug], name: "postId")
 
}

model Comment {
  id            Int       @id @default(autoincrement())
  body          String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  post          Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId        Int
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  commentVotes  CommentVote[]
}

model Tag {
  id            Int       @id @default(autoincrement())
  name          String    @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  posts         Post[]
}

model PostVote {
  id            Int       @id @default(autoincrement())
  value         Int
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  post          Post      @relation(fields: [postId], references: [id])
  postId        Int

  @@unique([userId, postId], name: "userPostVote")
}

model CommentVote {
  id            Int       @id @default(autoincrement())
  value         Int
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  comment       Comment?   @relation(fields: [commentId], references: [id])
  commentId     Int        @default(0)
  @@unique([userId, commentId], name: "userCommentVote")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}